@using Aurigma.Design
@using Aurigma.Design.Math
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime

<div style="background-color: gray; width: @(Width)px; height: @(Height)px">
    <BECanvas Width="@Width" Height="@Height" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Design _design;
    private int _currentSurfaceIndex;
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _outputCanvasContext;
    private IJSObjectReference _module;
    private DotNetObjectReference<DesignViewer> _instanceRef; 

    [Parameter]
    public long Width { get; set; } = 256;

    [Parameter]
    public long Height { get; set; } = 256;

    private Surface CurrentSurface
    {
        get
        {
            return _design.Surfaces[_currentSurfaceIndex];
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();

            _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./_content/BlazorExtensions/DesignViewer.razor.js");

            _instanceRef = DotNetObjectReference.Create(this);

            RequestRendering();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void RequestRendering()
    {
        if (_module == null || _instanceRef == null)
        {
            return;
        }

        _module.InvokeVoidAsync("callRequestAnimationFrame", _instanceRef);
    }

    [JSInvokable]
    public async ValueTask ViewerRenderLoop(float timeStamp)
    {
        await RedrawCanvasAsync(timeStamp);

        RequestRendering();
    }

    public void SetDesign(Design design)
    {
        _design = design;
        RequestRendering();
    }

    public void SetCurrentSurfaceIndex(int index)
    {
        _currentSurfaceIndex = index;       
        RequestRendering();
    }

    private async Task RedrawCanvasAsync(float timeStamp)
    {
        Size size = CurrentSurface.Artboards.First().Size;
        Affine2DMatrix transform = CurrentSurface.Artboards.First().Basis;

        await _outputCanvasContext.SetTransformAsync(
        transform.M11,
        transform.M12,
        transform.M21,
        transform.M22,
        transform.D1,
        transform.D2);
        await _outputCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _outputCanvasContext.SetFillStyleAsync("lightgray");
        await _outputCanvasContext.FillRectAsync(0, 0, size.Width, size.Height);

        await _outputCanvasContext.SetFillStyleAsync("black");
        await _outputCanvasContext.SetFontAsync("24px verdana");
        await _outputCanvasContext.FillTextAsync($"time: {timeStamp}", 20, 80);
    }
}
