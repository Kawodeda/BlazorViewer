@using Aurigma.Design
@using Aurigma.Design.Math
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorExtensions.Commands;
@using BlazorExtensions.InputHandling;
@inject IJSRuntime JsRuntime
@implements IViewer

<div style="background-color: gray; position: absolute; width: @(Width)px; height: @(Height)px">
    <BECanvas Width="@Width" Height="@Height" @ref="_canvasReference"></BECanvas>
</div>
<div style="position: absolute; width: @(Width)px; height: @(Height)px" 
    @onclick="OnClick"
    @onmousedown="OnMouseDown" 
    @onmouseup="OnMouseUp" 
    @onmousemove="OnMouseMove"
    @onmouseover="OnMouseOver"
    @onmouseout="OnMouseOut"
    @onwheel="OnWheel"
    @onkeydown="OnKeyDown"
    @onkeyup="OnKeyUp">
    <BECanvas Width="@Width" Height="@Height" @ref="_uiCanvasReference"></BECanvas>
</div>

@code {
    private Design _design;
    private int _currentSurfaceIndex;
    private BECanvasComponent _canvasReference;
    private BECanvasComponent _uiCanvasReference;
    private Canvas2DContext _outputCanvasContext;
    private Canvas2DContext _uiCanvasContext;
    private IJSObjectReference _module;
    private DotNetObjectReference<DesignViewer> _instanceRef;
    private IInputHandlingBuilder _inputHandler;

    // Use ScrollX property instead
    private float _scrollX = 0f;

    // Use ScrollY property instead
    private float _scrollY = 0f;

    private float _minZoom = 0.2f;
    private float _maxZoom = 10f;

    // Use Zoom property instead
    private float _zoom = 2.61f;

    [Parameter]
    public long Width { get; set; } = 256;

    [Parameter]
    public long Height { get; set; } = 256;

    [Parameter]
    public Sides ArtboardScrollMargin { get; set; } = new Sides(0f);

    public float ScrollbarSize { get; } = 16f;

    public bool IsHorizontalScrollbarShown
    {
        get
        {
            return CurrentArtboard.Size.Width * Zoom 
                + ArtboardScrollMargin.Left
                + ArtboardScrollMargin.Right > Width;
        }
    }

    public bool IsVerticalScrollbarShown
    {
        get
        {
            return CurrentArtboard.Size.Height * Zoom
                + ArtboardScrollMargin.Top
                + ArtboardScrollMargin.Bottom > Height;
        }
    }

    public float ViewPortWidth
    {
        get
        {
            return Width;
        }
    }

    public float ViewPortHeight
    {
        get
        {
            return Height;
        }
    }

    public float ScrollX
    {
        get
        {
            // Saves from incorrect scrollbar behaviour when zoom is changing
            if(_scrollX < MinScrollX)
            {
                _scrollX = MinScrollX;
            }
            if(_scrollX > MaxScrollX)
            {
                _scrollX = MaxScrollX;
            }

            return _scrollX;
        }
        set
        {
            if(value < MinScrollX)
            {
                _scrollX = MinScrollX;
                return;
            }
            if(value > MaxScrollX)
            {
                _scrollX = MaxScrollX;
                return;
            }

            _scrollX = value;
        }
    }

    public float ScrollY
    {
        get
        {
            // Saves from incorrect scrollbar behaviour when zoom is changing
            if(_scrollY < MinScrollY)
            {
                _scrollY = MinScrollY;
            }
            if(_scrollY > MaxScrollY)
            {
                _scrollY = MaxScrollY;
            }

            return _scrollY;
        }
        set
        {
            if(value < MinScrollY)
            {
                _scrollY = MinScrollY;
                return;
            }
            if(value > MaxScrollY)
            {
                _scrollY = MaxScrollY;
                return;
            }

            _scrollY = value;
        }
    }

    public float Zoom
    {
        get
        {
            return _zoom;
        }
        set
        {
            if(value < _minZoom)
            {
                _zoom = _minZoom;
                return;
            }
            if(value > _maxZoom)
            {
                _zoom = _maxZoom;
                return;
            }            

            _zoom = value;
        }
    }

    public float ScrollableAreaHeight
    {
        get
        {
            return CurrentArtboard.Size.Height * Zoom
                + ArtboardScrollMargin.Top
                + ArtboardScrollMargin.Bottom;
        }
    }

    public float ScrollableAreaWidth
    {
        get
        {
            return CurrentArtboard.Size.Width * Zoom
                + ArtboardScrollMargin.Left
                + ArtboardScrollMargin.Right;
        }
    }

    public float VerticalScrollbarBodyPos
    {
        get
        {
            float topLimitY = (Height - CurrentArtboard.Size.Height * Zoom) / 2f 
                + ScrollY - ArtboardScrollMargin.Top;

            return -topLimitY * (Height - ScrollbarSize) / ScrollableAreaHeight;
        }
    }

    public float HorizontalScrollbarBodyPos
    {
        get
        {
            float leftLimitX = (Width - CurrentArtboard.Size.Width * Zoom) / 2f 
                + ScrollX - ArtboardScrollMargin.Left;

            return -leftLimitX * (Width - ScrollbarSize) / ScrollableAreaWidth;
        }
    }

    public float VerticalScrollbarBodyHeight
    {
        get
        {
            return Height * (Height - ScrollbarSize) / ScrollableAreaHeight;
        }
    }

    public float HorizontalScrollbarBodyWidth
    {
        get
        {
            return Width * (Width - ScrollbarSize) / ScrollableAreaWidth;
        }
    }

    public float VerticalScrollbarHeight
    {
        get
        {
            return ViewPortHeight - ScrollbarSize;
        }
    }

    public float HorizontalScrollbarWidth
    {
        get
        {
            return ViewPortWidth - ScrollbarSize;
        }
    }

    [JSInvokable]
    public async ValueTask ViewerRenderLoop(float timeStamp)
    {
        await RedrawCanvasAsync(timeStamp);
        await RedrawUiCanvasAsync(timeStamp);

        RequestRendering();
    }

    public void SetDesign(Design design)
    {
        _design = design;
        RequestRendering();
    }

    public void SetCurrentSurfaceIndex(int index)
    {
        _currentSurfaceIndex = index;       
        RequestRendering();
    }

    protected override void OnInitialized()
    {
        _inputHandler = new DesignViewerInputHandler(this);
        _inputHandler.UseHandler<ViewPortInputHandler>();
        _inputHandler.UseHandler<DesignInputHandler>();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();
            _uiCanvasContext = await _uiCanvasReference.CreateCanvas2DAsync();

            _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./_content/BlazorExtensions/DesignViewer.razor.js");

            _instanceRef = DotNetObjectReference.Create(this);

            RequestRendering();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private Surface CurrentSurface
    {
        get
        {
            return _design.Surfaces[_currentSurfaceIndex];
        }
    }

    private Artboard CurrentArtboard
    {
        get
        {
            return CurrentSurface.Artboards.First();
        }
    }

    private float MinScrollX
    {
        get
        {
            return (Width - (CurrentArtboard.Size.Width * Zoom)) / 2f
                        - ArtboardScrollMargin.Right;
        }
    }

    private float MaxScrollX
    {
        get
        {
            return ArtboardScrollMargin.Left
                        - (Width - (CurrentArtboard.Size.Width * Zoom)) / 2f;
        }
    }

    private float MinScrollY
    {
        get
        {
            return (Height - (CurrentArtboard.Size.Height * Zoom)) / 2f
                        - ArtboardScrollMargin.Bottom;
        }
    }

    private float MaxScrollY
    {
        get
        {
            return ArtboardScrollMargin.Top
                        - (Height - (CurrentArtboard.Size.Height * Zoom)) / 2f;
        }
    }

    private void RequestRendering()
    {
        if (_module == null || _instanceRef == null)
        {
            return;
        }

        _module.InvokeVoidAsync("callRequestAnimationFrame", _instanceRef);
    }

    private void OnClick(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnClick(e);
        ExecuteCommand(result);
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseDown(e);
        ExecuteCommand(result);
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseMove(e);
        ExecuteCommand(result);
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseUp(e);
        ExecuteCommand(result);
    }

    private void OnMouseOver(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOver(e);
        ExecuteCommand(result);
    }

    private void OnMouseOut(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOut(e);
        ExecuteCommand(result);
    }

    private void OnWheel(WheelEventArgs e)
    {
        ICommand result = _inputHandler.OnWheel(e);
        ExecuteCommand(result);
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyDown(e);
        ExecuteCommand(result);
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyUp(e);
        ExecuteCommand(result);
    }

    private void ExecuteCommand(ICommand command)
    {
        if(command.CanExecute())
        {
            command.Execute();
        }
    }

    private float GetScrollXFromScrollbarShift(float shift)
    {
        return ScrollableAreaWidth * -shift / (Width - ScrollbarSize);
    }

    private float GetScrollYFromScrollbarShift(float shift)
    {
        return ScrollableAreaHeight * -shift / (Height - ScrollbarSize);
    }

    private async Task RedrawCanvasAsync(float timeStamp)
    {
        Size size = CurrentArtboard.Size;
        Affine2DMatrix transform = CurrentSurface.Artboards.First().Basis;
        Point shiftToCenter = new Point(
            (Width - size.Width * Zoom) / 2, 
            (Height - size.Height * Zoom) / 2);
        Point scroll = new Point(ScrollX, ScrollY);

        transform = transform
            .Translate(shiftToCenter)
            .Translate(scroll)
            .Scale(Zoom);

        await _outputCanvasContext.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await _outputCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _outputCanvasContext.SetTransformAsync(
        transform.M11,
        transform.M12,
        transform.M21,
        transform.M22,
        transform.D1,
        transform.D2);      

        await _outputCanvasContext.SetFillStyleAsync("lightgray");
        await _outputCanvasContext.FillRectAsync(0, 0, size.Width, size.Height);

        await _outputCanvasContext.SetFillStyleAsync("black");
        await _outputCanvasContext.SetFontAsync("20px verdana");
        await _outputCanvasContext.FillTextAsync($"scrollX: {ScrollX.ToString("N2")}", 10, 30);
        await _outputCanvasContext.FillTextAsync($"scrollY: {ScrollY.ToString("N2")}", 10, 50);
        await _outputCanvasContext.FillTextAsync($"zoom: {Zoom.ToString("N2")}", 10, 70);
    }

    private async Task RedrawUiCanvasAsync(float timeStamp)
    {
        await _uiCanvasContext.SetGlobalAlphaAsync(0.66f);
        await _uiCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _uiCanvasContext.SetStrokeStyleAsync("red");
        await _uiCanvasContext.StrokeRectAsync(0, 0, Width, Height);

        if(IsHorizontalScrollbarShown)
        {
            await RedrawHorizontalScrollbarAsync();
        }
        if(IsVerticalScrollbarShown)
        {
            await RedrawVerticalScrollbarAsync();
        }    
    }

    private async Task RedrawVerticalScrollbarAsync()
    {
        float verticalScrollbarX = Width - ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX, 
            0, 
            ScrollbarSize, 
            Height - ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX,
            VerticalScrollbarBodyPos,
            ScrollbarSize,
            VerticalScrollbarBodyHeight);
    }

    private async Task RedrawHorizontalScrollbarAsync()
    {
        float horizontalScrollbarY = Height - ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            0, 
            horizontalScrollbarY, 
            Width - ScrollbarSize, 
            ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            HorizontalScrollbarBodyPos,
            horizontalScrollbarY,
            HorizontalScrollbarBodyWidth,
            ScrollbarSize);
    }
}
