@using Aurigma.Design
@using Aurigma.Design.Math
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorExtensions.Commands;
@using BlazorExtensions.Commands.Context;
@using BlazorExtensions.InputHandling;
@using BlazorExtensions.Viewports;
@inject IJSRuntime JsRuntime
@implements IDesignViewer

<div style="background-color: gray; position: absolute; width: @(Width)px; height: @(Height)px">
    <BECanvas Width="@Width" Height="@Height" @ref="_canvasReference"></BECanvas>
</div>
<div style="position: absolute; width: @(Width)px; height: @(Height)px" 
    @onclick="OnClick"
    @onmousedown="OnMouseDown" 
    @onmouseup="OnMouseUp" 
    @onmousemove="OnMouseMove"
    @onmouseover="OnMouseOver"
    @onmouseout="OnMouseOut"
    @onwheel="OnWheel"
    @onkeydown="OnKeyDown"
    @onkeyup="OnKeyUp">
    <BECanvas Width="@Width" Height="@Height" @ref="_uiCanvasReference"></BECanvas>
</div>

@code {
    private Design _design;
    private int _currentSurfaceIndex;
    private BECanvasComponent _canvasReference;
    private BECanvasComponent _uiCanvasReference;
    private Canvas2DContext _outputCanvasContext;
    private Canvas2DContext _uiCanvasContext;
    private IJSObjectReference _module;
    private DotNetObjectReference<DesignViewer> _instanceRef;
    private IInputHandlingBuilder _inputHandler;
    private IViewport _viewport;

    [Parameter]
    public long Width { get; set; } = 256;

    [Parameter]
    public long Height { get; set; } = 256;

    [Parameter]
    public Sides ArtboardScrollMargin { get; set; } = new Sides(0f);

    public IViewport Viewport
    {
        get
        {
            if(_viewport == null)
            {
                var viewportSize = new Size()
                {
                    Width = Width,
                    Height = Height
                };

                _viewport = new Viewport(
                    viewportSize, 
                    new Size(), 
                    ArtboardScrollMargin);
            }

            return _viewport;
        }
    }

    public Surface CurrentSurface
    {
        get
        {
            return _design.Surfaces[_currentSurfaceIndex];
        }
    }

    public Element? SelectedElement { get; set; }

    public Affine2DMatrix Transform
    {
        get
        {
            Size size = CurrentArtboard.Size;
            Point shiftToCenter = new Point(
                (Width - size.Width * _viewport.Zoom) / 2, 
                (Height - size.Height * _viewport.Zoom) / 2);
            Point scroll = new Point(_viewport.ScrollX, _viewport.ScrollY);

            return CurrentArtboard.Basis
                .Translate(shiftToCenter)
                .Translate(scroll)
                .Scale(_viewport.Zoom);
        }
    }

    [JSInvokable]
    public async ValueTask ViewerRenderLoop(float timeStamp)
    {
        await RedrawCanvasAsync(timeStamp);
        await RedrawUiCanvasAsync(timeStamp);

        RequestRendering();
    }

    public void SetDesign(Design design)
    {
        _design = design;
        _viewport.ContentSize = CurrentArtboard.ActualSize;
        RequestRendering();
    }

    public void SetCurrentSurfaceIndex(int index)
    {
        _currentSurfaceIndex = index;
        _viewport.ContentSize = CurrentArtboard.ActualSize;
        RequestRendering();
    }

    protected override void OnInitialized()
    {
        _inputHandler = new DesignViewerInputHandler(this);
        _inputHandler.UseHandler<ViewPortInputHandler>();
        _inputHandler.UseHandler<DesignInputHandler>();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();
            _uiCanvasContext = await _uiCanvasReference.CreateCanvas2DAsync();

            _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./_content/BlazorExtensions/DesignViewer.razor.js");

            _instanceRef = DotNetObjectReference.Create(this);

            RequestRendering();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private Artboard CurrentArtboard
    {
        get
        {
            return CurrentSurface.Artboards.First();
        }
    }

    private void RequestRendering()
    {
        if (_module == null || _instanceRef == null)
        {
            return;
        }

        _module.InvokeVoidAsync("callRequestAnimationFrame", _instanceRef);
    }

    private void OnClick(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnClick(e);
        ExecuteCommand(result);
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseDown(e);
        ExecuteCommand(result);
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseMove(e);
        ExecuteCommand(result);
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseUp(e);
        ExecuteCommand(result);
    }

    private void OnMouseOver(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOver(e);
        ExecuteCommand(result);
    }

    private void OnMouseOut(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOut(e);
        ExecuteCommand(result);
    }

    private void OnWheel(WheelEventArgs e)
    {
        ICommand result = _inputHandler.OnWheel(e);
        ExecuteCommand(result);
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyDown(e);
        ExecuteCommand(result);
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyUp(e);
        ExecuteCommand(result);
    }

    private void ExecuteCommand(ICommand command)
    {
        if(command.CanExecute())
        {
            command.Execute(new ExecutionContext(this));
        }
    }

    private async Task RedrawCanvasAsync(float timeStamp)
    {
        Size size = CurrentArtboard.Size;
        Affine2DMatrix transform = Transform;

        await _outputCanvasContext.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await _outputCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _outputCanvasContext.SetTransformAsync(
        transform.M11,
        transform.M12,
        transform.M21,
        transform.M22,
        transform.D1,
        transform.D2);      

        await _outputCanvasContext.SetFillStyleAsync("lightgray");
        await _outputCanvasContext.FillRectAsync(0, 0, size.Width, size.Height);

        await _outputCanvasContext.SetFillStyleAsync("black");
        await _outputCanvasContext.SetFontAsync("20px verdana");
        await _outputCanvasContext.FillTextAsync($"scrollX: {_viewport.ScrollX.ToString("N2")}", 10, 30);
        await _outputCanvasContext.FillTextAsync($"scrollY: {_viewport.ScrollY.ToString("N2")}", 10, 50);
        await _outputCanvasContext.FillTextAsync($"zoom: {_viewport.Zoom.ToString("N2")}", 10, 70);
    }

    private async Task RedrawUiCanvasAsync(float timeStamp)
    {
        await _uiCanvasContext.SetGlobalAlphaAsync(0.66f);
        await _uiCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _uiCanvasContext.SetStrokeStyleAsync("red");
        await _uiCanvasContext.StrokeRectAsync(0, 0, Width, Height);

        if(_viewport.IsHorizontalScrollbarShown)
        {
            await RedrawHorizontalScrollbarAsync();
        }
        if(_viewport.IsVerticalScrollbarShown)
        {
            await RedrawVerticalScrollbarAsync();
        }   

        await _uiCanvasContext.SetFillStyleAsync("black");
        await _uiCanvasContext.SetFontAsync("20px verdana");
        var selected = SelectedElement?.Content.ClosedVector.Controls.ControlsCase;
        await _uiCanvasContext.FillTextAsync($"SelectedElement: {selected}", 10, 60);
    }

    private async Task RedrawVerticalScrollbarAsync()
    {
        float verticalScrollbarX = Width - _viewport.ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX, 
            0, 
            _viewport.ScrollbarSize, 
            Height - _viewport.ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX,
            _viewport.VerticalScrollbarBodyPos,
            _viewport.ScrollbarSize,
            _viewport.VerticalScrollbarBodyHeight);
    }

    private async Task RedrawHorizontalScrollbarAsync()
    {
        float horizontalScrollbarY = Height - _viewport.ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            0, 
            horizontalScrollbarY, 
            Width - _viewport.ScrollbarSize, 
            _viewport.ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            _viewport.HorizontalScrollbarBodyPos,
            horizontalScrollbarY,
            _viewport.HorizontalScrollbarBodyWidth,
            _viewport.ScrollbarSize);
    }
}
