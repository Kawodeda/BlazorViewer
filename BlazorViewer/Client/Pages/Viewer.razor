@page "/viewer"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime

<PageTitle>Viewer</PageTitle>

<h1>Viewer</h1>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div id="theCanvas" style="position: fixed; opacity: 1; background-color: black; width: 800px; height: 600px">
    <BECanvas Width="800" Height="600" @ref="_canvasReference"></BECanvas>
</div>

@code {
    BECanvasComponent _canvasReference = null;
    Canvas2DContext _outputCanvasContext;

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();

        await JsRuntime.InvokeAsync<object>("initViewer", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async ValueTask ViewerRenderLoop(float timeStamp)
    {
        await _outputCanvasContext.ClearRectAsync(0, 0, 800, 600);

        await _outputCanvasContext.SetFillStyleAsync("green");
        await _outputCanvasContext.FillRectAsync(10, 50, 780, 500);


        await _outputCanvasContext.SetFillStyleAsync("black");
        await _outputCanvasContext.SetFontAsync("24px verdana");
        await _outputCanvasContext.FillTextAsync($"time: {timeStamp}", 20, 80);

        await _outputCanvasContext.SetFontAsync("24px verdana");
        await _outputCanvasContext.FillTextAsync($"counter: {currentCount}", 20, 160);
    }
}
