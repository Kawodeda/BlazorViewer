@using Aurigma.Design
@using Aurigma.Design.Math
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

<h3>DesignViewer</h3>

<div id="canvas" style="position: fixed; background-color: gray; width: @Width; height: @Height">
    <BECanvas Width="@Width" Height="@Height" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Design _design;
    private int _currentSurfaceIndex;
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _outputCanvasContext;

    [Parameter]
    public long Width { get; set; } = 256;

    [Parameter]
    public long Height { get; set; } = 256;

    private Surface CurrentSurface
    {
        get
        {
            return _design.Surfaces[_currentSurfaceIndex];
        }
    }

    public async Task SetDesign(Design design)
    {
        _design = design;
        await RedrawCanvasAsync();
    }

    public async Task SetCurrentSurfaceIndex(int index)
    {
        _currentSurfaceIndex = index;
        await RedrawCanvasAsync();
    }

    private async Task RedrawCanvasAsync()
    {
        _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();

        Size size = CurrentSurface.Artboards.First().Size;
        Affine2DMatrix transform = CurrentSurface.Artboards.First().Basis;

        await _outputCanvasContext.SetTransformAsync(
        transform.M11,
        transform.M12,
        transform.M21,
        transform.M22,
        transform.D1,
        transform.D2);
        await _outputCanvasContext.ClearRectAsync(0, 0, Width, Height);

        await _outputCanvasContext.SetFillStyleAsync("lightgray");
        await _outputCanvasContext.FillRectAsync(0, 0, size.Width, size.Height);
    }
}
